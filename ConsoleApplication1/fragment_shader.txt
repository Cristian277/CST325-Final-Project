
#version 330 core
out vec4 FragColor;
uniform vec4 color;
in mat3 TBN;
in vec2 Texcoords;
in vec3 Normal; //make a in vec3 Normal while the top is out
in vec3 world_space_position;
in vec3 world_space_camera_position;

uniform sampler2D diffuse_map;
uniform sampler2D specular_map;
uniform sampler2D normal_map;
uniform samplerCube skybox;

void main() { //color is the name of the vec 4 (r,g,b,a)

//Light settings
vec3 ambient = vec3(0.1,0.1,0.1);
vec3 light_dir = vec3(1.0,1.0,1.0);
vec3 light_color = 1.0*vec3(0.6,0.6,0.6)-ambient*0.5;
//"vec3 specular_color = vec3(1.0,1.0,1.0);\n"
vec3 specular_color = 0.4 * vec3(1.0,1.0,1.0);

vec3 normal = vec3(texture(normal_map,Texcoords));

normal = normal * 2.0 - 1.0;
normal = TBN * normal;
normal = normalize(normal);

//"vec2 uvs = vec2(gl_FragCoord) / 100.0;\n"
//"float fog = gl_FragCoord.z/gl_FragCoord.w;\n"

//Diffuse lighting
float diffuse_intensity = max(dot(normal,light_dir),0.0); //doesn't take negative numbers
vec3 diffuse_map_color = vec3(texture(specular_map, Texcoords));
vec3 diffuse = diffuse_map_color*diffuse_intensity*light_color;

//Specular lighting
vec3 view_dir = normalize(world_space_camera_position - world_space_position);
vec3 reflect_direction = reflect(-light_dir,normal);
float specular_intensity = pow(max(dot(view_dir,reflect_direction),0.0),1.0);
specular_intensity*=(1.0-texture(specular_map,Texcoords).r);
vec3 specular = specular_intensity * specular_color;

vec3 I = normalize(world_space_position - world_space_camera_position);
vec3 Reflect = reflect(I,normal);
vec3 reflection = texture(skybox, Reflect).xyz;

//Final output
FragColor = vec4(ambient + diffuse + specular * reflection,1.0);
//FragColor = vec4(texture(specular_map,Texcoords).xyz,1.0);

};